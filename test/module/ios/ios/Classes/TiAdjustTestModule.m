//
//  TiAdjustTestModule.m
//  Adjust SDK
//
//  Created by Uglješa Erceg (@uerceg) on 6th August 2018.
//  Copyright © 2018-2019 Adjust GmbH. All rights reserved.
//

#import "TiBase.h"
#import "TiHost.h"
#import "TiUtils.h"
#import "TiAdjustTestModule.h"
#import <AdjustTestLibrary/ATLTestLibrary.h>

@interface TiAdjustTestModule() <AdjustCommandDelegate>

@property (nonatomic, assign) int order;
@property (nonatomic, strong) ATLTestLibrary *testLibrary;
@property (nonatomic, strong) KrollCallback *jsCommandCallback;

@end

@implementation TiAdjustTestModule

#pragma mark Internal

// Titanium autogenerated stuff.
// This is generated for your module, please do not change it
- (id)moduleGUID {
  return @"ba260430-69e1-4fd6-82e7-56e777b468dc";
}

// Titanium autogenerated stuff.
// This is generated for your module, please do not change it
- (NSString *)moduleId {
  return @"ti.adjust.test";
}

#pragma mark Lifecycle

// Titanium autogenerated stuff.
- (void)startup {
  // This method is called when the module is first loaded
  // You *must* call the superclass
  [super startup];
  DebugLog(@"[DEBUG] %@ loaded", self);
}

#pragma Public APIs

- (void)initialize:(id)args {
    self.order = 0;
    NSArray *configArray = (NSArray *)args;
    NSString *baseUrl = [configArray objectAtIndex:0];
    self.jsCommandCallback = [configArray objectAtIndex:1];
    self.testLibrary = [[ATLTestLibrary alloc] initWithBaseUrl:baseUrl andCommandDelegate:self];
}

- (void)addTestDirectory:(id)args {
    NSArray *configArray = (NSArray *)args;
    NSString *testDirName = [configArray objectAtIndex:0];
    [self.testLibrary addTestDirectory:testDirName];
}

- (void)addTest:(id)args {
    NSArray *configArray = (NSArray *)args;
    NSString *testName = [configArray objectAtIndex:0];
    [self.testLibrary addTest:testName];
}

- (void)startTestSession:(id)args {
    NSArray *configArray = (NSArray *)args;
    NSString *clientSdk = [configArray objectAtIndex:0];
    [self.testLibrary startTestSession:clientSdk];
}

- (void)addInfoToSend:(id)args {
    NSArray *configArray = (NSArray *)args;
    NSString *key = [configArray objectAtIndex:0];
    NSString *value = [configArray objectAtIndex:1];
    [self.testLibrary addInfoToSend:key value:value];
}

- (void)sendInfoToServer:(id)args {
    NSArray *configArray = (NSArray *)args;
    NSString *baseUrl = [configArray objectAtIndex:0];
    [self.testLibrary sendInfoToServer:baseUrl];
}

- (void)executeCommandRawJson:(NSString *)json {
    NSError *jsonError;
    NSData *objectData = [json dataUsingEncoding:NSUTF8StringEncoding];
    NSMutableDictionary *dict = [NSJSONSerialization JSONObjectWithData:objectData
                                                                options:NSJSONReadingMutableContainers
                                                                  error:&jsonError];
    NSError *err;
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dict options:0 error:&err];
    NSString *myString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];

    NSNumber *num = [NSNumber numberWithInt:self.order];
    NSArray *array = [NSArray arrayWithObjects:myString, num, nil];
    self.order++;

    [self.jsCommandCallback call:array thisObject:nil];
}

@end
